{
	"name": "101_GR06_df_transf",
	"properties": {
		"description": "Data transf",
		"folder": {
			"name": "101_GR06"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "101_GR06_RAW_ADLS_Bitcoin",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "101_GR06_RAW_ADLS_Tweets",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "101_GR06_RAW_ADLS_Ethereum",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "101_GR06_RAW_ADLS_FearGreed",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "101_GR06_RAW_ADLS_Nasdaq",
						"type": "DatasetReference"
					},
					"name": "source5"
				},
				{
					"dataset": {
						"referenceName": "101_GR06_RAW_ADLS_SP500",
						"type": "DatasetReference"
					},
					"name": "source6"
				},
				{
					"dataset": {
						"referenceName": "101_GR06_RAW_ADLS_Gold",
						"type": "DatasetReference"
					},
					"name": "source7"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "101_GR06_RAW_ADLS_Bitcoin",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          SNo as string,",
				"          Date as string,",
				"          Price as string,",
				"          Open as string,",
				"          High as string,",
				"          Low as string,",
				"          {Vol.} as string,",
				"          {Change %} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          Prop_0 as string,",
				"          id as string,",
				"          conversation_id as string,",
				"          created_at as string,",
				"          date as string,",
				"          time as string,",
				"          timezone as string,",
				"          user_id as string,",
				"          username as string,",
				"          name as string,",
				"          place as string,",
				"          tweet as string,",
				"          language as string,",
				"          mentions as string,",
				"          urls as string,",
				"          photos as string,",
				"          replies_count as string,",
				"          retweets_count as string,",
				"          likes_count as string,",
				"          hashtags as string,",
				"          cashtags as string,",
				"          link as string,",
				"          retweet as string,",
				"          quote_url as string,",
				"          video as string,",
				"          thumbnail as string,",
				"          near as string,",
				"          geo as string,",
				"          source as string,",
				"          user_rt_id as string,",
				"          user_rt as string,",
				"          retweet_id as string,",
				"          reply_to as string,",
				"          retweet_date as string,",
				"          translate as string,",
				"          trans_src as string,",
				"          trans_dest as string,",
				"          search as string,",
				"          decoded_tweet as string,",
				"          neg as string,",
				"          neu as string,",
				"          pos as string,",
				"          compound as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          SNo as string,",
				"          Date as string,",
				"          Price as string,",
				"          Open as string,",
				"          High as string,",
				"          Low as string,",
				"          {Vol.} as string,",
				"          {Change %} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          date as string,",
				"          fng_value as string,",
				"          fng_classification as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          Date as string,",
				"          {Close/Last} as string,",
				"          Volume as string,",
				"          Open as string,",
				"          High as string,",
				"          Low as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source(output(",
				"          Date as string,",
				"          {Close/Last} as string,",
				"          Volume as string,",
				"          Open as string,",
				"          High as string,",
				"          Low as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source6",
				"source(output(",
				"          Date as string,",
				"          Open as string,",
				"          High as string,",
				"          Low as string,",
				"          Close as string,",
				"          Volume as string,",
				"          Currency as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source7",
				"source1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SNo as string,",
				"          Date as string,",
				"          Price as string,",
				"          Open as string,",
				"          High as string,",
				"          Low as string,",
				"          {Vol.} as string,",
				"          {Change %} as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}